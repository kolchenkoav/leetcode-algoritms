package algoritms;

/**
 * https://leetcode.com/problems/longest-substring-without-repeating-characters/
 * 3. Longest Substring Without Repeating Characters
 *
 * Этот код находит длину самой длинной подстроки без повторяющихся символов.в строке. Алгоритм работает следующим образом:
 *
 * 1. Создается массив `index`, где каждый элемент соответствует индексу первого вхождения соответствующего символа в строку.
 * 2. Начальные индексы `i` и `j` инициализируются нулями.
 * 3. В цикле `for` перебираются все символы строки.
 * 4. Для каждого символа `s.charAt(i)`, ищется максимальное значение в массиве `index`,
 *      которое меньше или равно текущему индексу. Это значение соответствует индексу последнего вхождения этого символа в подстроку.
 * 5. Вычисляется длина подстроки, начиная с индекса `j` и заканчивая текущим индексом `i`. Эта длина сохраняется в переменной `ans`.
 * 6. Индекс текущего символа в массиве `index` устанавливается равным текущему индексу `i` плюс единица.
 * 7. Цикл продолжается до тех пор, пока не будут перебраны все символы строки.
 * 8. В конце возвращается максимальная длина подстроки, найденная в процессе выполнения кода.
 *
 * Таким образом, этот код находит самую длинную подстроку, которая не содержит повторяющихся символов.
 */
public class LongestSubstringWithoutRepeatingCharacters {
    public static int lengthOfLongestSubstring(String s) {
        int n = s.length();
        int ans = 0;
        int[] index = new int[256];
        for (int i = 0, j = 0; i < n; i++) {
            j = Math.max(j, index[s.charAt(i)]);
            ans = Math.max(ans, i - j + 1);
            index[s.charAt(i)] = i + 1;
        }
        return ans;
    }
}
