package algoritms;

/**
 * https://leetcode.com/problems/string-to-integer-atoi/
 * 8. String to Integer (atoi)
 *
 * 1. Пропуск начальных пробелов: Алгоритм начинает с пропуска всех пробелов в начале строки. Это делается с помощью цикла,
 *      который продолжается до тех пор, пока не будет найден первый непробельный символ.
 * 2. Определение знака: Если следующий символ является ‘+’ или ‘-’, алгоритм считывает этот символ. Это определяет,
 * будет ли итоговый результат положительным или отрицательным.
 *      Если ни одного из этих символов нет, предполагается, что результат положительный.
 * 3. Считывание чисел: Алгоритм считывает следующие символы до следующего нецифрового символа или до конца строки.
 *      Все остальные символы строки игнорируются. Эти цифры преобразуются в число (например, “123” -> 123, “0032” -> 32).
 *      Если цифры не были прочитаны, то число равно 0. Знак меняется при необходимости (на основе шага 2).
 * 4. Проверка на переполнение: Если число выходит за пределы диапазона 32-битного целого числа [-231, 231 - 1],
 *      то число “зажимается”, чтобы остаться в этом диапазоне. Конкретно, числа меньше -231 должны быть “зажаты” до -231,
 *      а числа больше 231 - 1 должны быть “зажаты” до 231 - 1.
 * 5. Возвращение результата: В конце алгоритм возвращает число как итоговый результат.
 *
 * Этот алгоритм эффективен, поскольку он обрабатывает строку только один раз и использует константное количество памяти.
 * Он также учитывает возможное переполнение и корректно обрабатывает его.
 *
 * Этот код предполагает, что входная строка s не является null. Если есть вероятность, что s может быть null,
 *      вы должны добавить проверку на null в начале метода.
 *      Также этот код не обрабатывает случай, когда numRows меньше 1.
 *      Если numRows может быть меньше 1, вы должны добавить проверку на это.
 *
 */
public class StringToInteger {
    public static int myAtoi(String s) {
        int i = 0, sign = 1, n = s.length();
        while (i < n && s.charAt(i) == ' ') {
            i++;
        }
        if (i < n && (s.charAt(i) == '+' || s.charAt(i) == '-')) {
            sign = (s.charAt(i++) == '+') ? 1 : -1;
        }
        long res = 0;
        while (i < n && Character.isDigit(s.charAt(i))) {
            res = res * 10 + (s.charAt(i++) - '0');
            if (res * sign > Integer.MAX_VALUE) {
                return Integer.MAX_VALUE;
            }
            if (res * sign < Integer.MIN_VALUE) {
                return Integer.MIN_VALUE;
            }
        }
        return (int) (res * sign);
    }
}
