package algoritms;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;

/**
 * https://leetcode.com/problems/3sum/description/
 * 15. 3Sum
 *
 * Класс ThreeSum реализует алгоритм поиска всех уникальных троек чисел в массиве, которые в сумме дают ноль.
 *
 * Алгоритм работает следующим образом:
 * 1. Массив сортируется для упрощения поиска троек.
 * 2. Запускается цикл, который проходит по каждому элементу массива. Для каждого элемента выполняется следующее:
 *    - Если текущий элемент равен предыдущему, то он пропускается, чтобы избежать дубликатов в результатах.
 *    - Устанавливаются два указателя: один на следующий элемент после текущего, другой на последний элемент массива.
 *    - Запускается внутренний цикл, который продолжается, пока указатели не сойдутся. В этом цикле выполняется следующее:
 *      - Если сумма элементов на позициях указателей равна нулю (с учетом знака текущего элемента), то найдена тройка.
 *      - Если сумма меньше нуля, то указатель на следующий элемент сдвигается вправо, чтобы увеличить сумму.
 *      - Если сумма больше нуля, то указатель на последний элемент сдвигается влево, чтобы уменьшить сумму.
 * 3. Возвращается список всех найденных троек.
 *
 * Временная сложность алгоритма составляет O(n^2), где n - количество элементов в массиве.
 */
public class ThreeSum {
    public static List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> result = new LinkedList<>();
        for (int i = 0; i < nums.length - 2; i++) {
            if (i == 0 || (i > 0 && nums[i] != nums[i - 1])) {
                int lo = i + 1, hi = nums.length - 1, sum = 0 - nums[i];
                while (lo < hi) {
                    if (nums[lo] + nums[hi] == sum) {
                        result.add(Arrays.asList(nums[i], nums[lo], nums[hi]));
                        while (lo < hi && nums[lo] == nums[lo + 1]) lo++;
                        while (lo < hi && nums[hi] == nums[hi - 1]) hi--;
                        lo++;
                        hi--;
                    } else if (nums[lo] + nums[hi] < sum) lo++;
                    else hi--;
                }
            }
        }
        return result;
    }
}
