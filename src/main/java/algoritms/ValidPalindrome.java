package algoritms;

/**
 * https://leetcode.com/problems/valid-palindrome/
 * 125. Valid Palindrome
 *
 * Метод isPalindrome(String s) проверяет, является ли входная строка s палиндромом.
 *      Палиндром - это слово, число, фраза, или другая последовательность символов, которая читается
 *      одинаково в обоих направлениях, игнорируя пробелы, знаки препинания и регистр символов.
 *
 * Вот как обычно работает этот метод:
 *
 * 1. Инициализация: Создаются два указателя, один в начале строки s, а другой в конце.
 * 2. Проверка на палиндром: Указатели двигаются навстречу друг другу, пока они не встретятся в середине.
 * На каждом шаге проверяется, совпадают ли символы, на которые указывают указатели. Если символы не совпадают,
 *      метод возвращает false, потому что строка s не является палиндромом.
 * 3. Пропуск неалфавитных символов: Если символ, на который указывает указатель, не является буквой или цифрой,
 *      указатель сдвигается дальше. Это делается потому, что палиндромы обычно игнорируют пробелы,
 *      знаки препинания и регистр символов.
 * 4. Возврат результата: Если все пары символов совпадают, метод возвращает true, потому что строка s является палиндромом.
 *
 * Важно отметить, что реализация метода может немного отличаться в зависимости от конкретных требований
 * и языка программирования. Например, некоторые реализации могут сначала преобразовать строку в нижний регистр
 * и удалить все неалфавитные символы, а затем проверить, является ли результат палиндромом.
 * Это может быть более эффективно, если входная строка очень длинная и содержит много неалфавитных символов.
 * Однако такой подход может потребовать дополнительной памяти для хранения преобразованной строки.
 */
public class ValidPalindrome {
    public static boolean isPalindrome(String s) {
        if (s == null || s.length() == 0) {
            return true;
        }
        int left = 0;
        int right = s.length() - 1;
        while (left < right) {
            char leftChar = s.charAt(left);
            char rightChar = s.charAt(right);
            if (!Character.isLetterOrDigit(leftChar)) {
                left++;
                continue;
            }
            if (!Character.isLetterOrDigit(rightChar)) {
                right--;
                continue;
            }
            if (Character.toLowerCase(leftChar) != Character.toLowerCase(rightChar)) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
}
