package algoritms;

import java.util.Stack;

/**
 * https://leetcode.com/problems/valid-parentheses/
 * 20. Valid Parentheses
 *
 * Этот код проверяет, является ли строка `s` правильно скоординированной последовательностью скобок.
 *      Алгоритм работает следующим образом:
 *
 * 1. Создается стек `stack`, который будет использоваться для хранения скобок.
 * 2. В цикле `for` перебираются все символы в строке `s`.
 * 3. Если текущий символ - это открывающая скобка (`('), `{`, или `[`,
 *      то соответствующая закрывающая скобка (`)`, `}`, или `]`) добавляется в стек.
 * 4. Если текущий символ - это закрывающая скобка (`)` или `]`, то проверяется, есть ли соответствующая
 *      открывающая скобка в стеке. Если да, то открывающая скобка удаляется из стека.
 *      Если нет, то возвращается `false`, так как последовательность скобок некорректна.
 * 5. После окончания цикла `for` проверяется, пуст ли стек. Если да, то последовательность скобок корректна.
 *      Если нет, то возвращается `false`, так как в последовательности есть лишние скобки.
 *
 * Таким образом, этот код проверяет, является ли строка `s` правильно скоординированной последовательностью скобок.
 *
 */
public class ValidParentheses {
    public static boolean isValid(String s) {
        Stack<Character> stack = new Stack<Character>();
        for (char c : s.toCharArray()) {
            if (c == '(')
                stack.push(')');
            else if (c == '{')
                stack.push('}');
            else if (c == '[')
                stack.push(']');
            else if (stack.isEmpty() || stack.pop() != c)
                return false;
        }
        return stack.isEmpty();
    }
}
